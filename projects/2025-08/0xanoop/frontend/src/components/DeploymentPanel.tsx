import { useState } from "react";
import { Node, Edge } from "reactflow";
import {
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { ScrollArea } from "./ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { generateDaoContracts as generatePlaceholderContracts } from "@/lib/contract-generator";
import { generateFinalContractsFromAI } from "@/lib/gemini";
import { uploadJsonToIpfs } from "@/lib/ipfs";
import { showSuccess, showError, showLoading, dismissToast } from "@/utils/toast";
import { Bot, Loader, AlertTriangle, PenSquare, CheckCircle, Expand } from "lucide-react";
import { useAccount, useWriteContract } from "wagmi";
import { daoRegistryAddress, daoRegistryAbi } from "@/lib/contracts";
import { ContractPreviewDialog } from "./ContractPreviewDialog";

interface DeploymentPanelProps {
  nodes: Node[];
  edges: Edge[];
}

type Step = 'idle' | 'generating' | 'generated' | 'uploading' | 'registering' | 'registered';

export const DeploymentPanel = ({ nodes, edges }: DeploymentPanelProps) => {
  const [contracts, setContracts] = useState<{ filename: string, code: string }[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [daoAddress, setDaoAddress] = useState('');
  const [step, setStep] = useState<Step>('idle');
  const [isPreviewOpen, setIsPreviewOpen] = useState(false);

  const { isConnected } = useAccount();
  const { writeContract, isPending: isRegistering, data: hash } = useWriteContract();

  const handleGenerateContracts = async () => {
    setStep('generating');
    setError(null);
    setContracts([]);
    setDaoAddress('');

    try {
      const placeholders = generatePlaceholderContracts(nodes, edges);
      if (placeholders.length === 0) {
        throw new Error("No contracts could be generated. Please add and connect nodes on the canvas.");
      }
      const finalContracts = await generateFinalContractsFromAI(nodes, edges, placeholders);
      setContracts(finalContracts);
      setStep('generated');
    } catch (e) {
      const errorMessage = e instanceof Error ? e.message : "An unknown error occurred.";
      setError(errorMessage);
      setStep('idle');
    }
  };

  const handleUploadAndRegister = async () => {
    if (!daoAddress.startsWith('0x') || daoAddress.length !== 42) {
      showError("Please enter a valid deployed DAO address.");
      return;
    }
    if (!isConnected) {
      showError("Please connect your wallet.");
      return;
    }

    setStep('uploading');
    const uploadToastId = showLoading("Uploading DAO info to IPFS...");
    let cid;
    try {
      const metadata = {
        name: "AI Generated DAO",
        description: "DAO configuration generated by AI DAO Creator",
        daoAddress,
        nodes,
        edges,
        contracts,
      };
      cid = await uploadJsonToIpfs(metadata);
      dismissToast(uploadToastId);
      showSuccess("DAO info uploaded to IPFS!");
    } catch (e) {
      const errorMessage = e instanceof Error ? e.message : "IPFS upload failed.";
      dismissToast(uploadToastId);
      showError(errorMessage);
      setStep('generated'); // Revert
      return;
    }

    setStep('registering');
    writeContract({
      address: daoRegistryAddress,
      abi: daoRegistryAbi,
      functionName: 'registerDAO',
      args: [daoAddress as `0x${string}`, cid],
    }, {
      onSuccess: (txHash) => {
        showSuccess(`DAO registration submitted!`);
        setStep('registered');
        console.log("Transaction Hash:", txHash);
      },
      onError: (error) => {
        showError(error.shortMessage || "Registration failed.");
        setStep('generated'); // Revert
      }
    });
  };

  const renderContractPreview = () => {
    if (step === 'generating') {
      return (
        <div className="flex-1 flex flex-col justify-center items-center text-center p-8 border rounded-lg bg-muted">
          <Loader className="h-12 w-12 mb-4 text-primary animate-spin" />
          <p className="text-sm text-muted-foreground">AI is writing your smart contracts...</p>
        </div>
      );
    }

    if (contracts.length === 0) {
      return (
        <div className="flex-1 flex flex-col justify-center items-center text-center p-8 border rounded-lg bg-muted">
          <Bot className="h-12 w-12 mb-4 text-muted-foreground" />
          <p className="text-sm text-muted-foreground">Your generated smart contracts will appear here.</p>
        </div>
      );
    }

    return (
      <div className="flex-1 flex flex-col overflow-hidden border rounded-lg relative">
        <Button variant="outline" size="sm" className="absolute top-2 right-2 z-10 h-8" onClick={() => setIsPreviewOpen(true)}>
          <Expand className="mr-2 h-4 w-4" /> Preview
        </Button>
        <Tabs defaultValue={contracts[0].filename} className="h-full flex flex-col">
          <TabsList className="m-2">
            {contracts.map(contract => (
              <TabsTrigger key={contract.filename} value={contract.filename}>{contract.filename}</TabsTrigger>
            ))}
          </TabsList>
          {contracts.map(contract => (
            <TabsContent key={contract.filename} value={contract.filename} className="flex-1 overflow-hidden">
              <ScrollArea className="h-full">
                <pre className="text-xs bg-background p-4"><code>{contract.code}</code></pre>
              </ScrollArea>
            </TabsContent>
          ))}
        </Tabs>
      </div>
    );
  };

  return (
    <>
      <ContractPreviewDialog isOpen={isPreviewOpen} onOpenChange={setIsPreviewOpen} contracts={contracts} />
      <SheetContent className="w-[600px] sm:w-[740px] flex flex-col">
        <SheetHeader>
          <SheetTitle>Deploy Your DAO</SheetTitle>
          <SheetDescription>
            Generate your contracts, deploy them manually, then register the main contract address here.
          </SheetDescription>
        </SheetHeader>
        
        <div className="flex-1 flex flex-col py-4 space-y-4 overflow-hidden">
          {/* Step 1: Generation */}
          <Button 
            onClick={handleGenerateContracts} 
            disabled={step === 'generating'}
            className="text-primary-foreground bg-gradient-to-r from-purple-500 to-pink-500 hover:opacity-90"
          >
            {step === 'generating' ? <Loader className="mr-2 h-4 w-4 animate-spin" /> : <Bot className="mr-2 h-4 w-4" />}
            Step 1: Generate Contracts
          </Button>

          {renderContractPreview()}

          {error && (
            <div className="text-center p-4 rounded-lg bg-destructive/10 border border-destructive/50">
              <p className="text-sm font-semibold text-destructive">An Error Occurred</p>
              <p className="text-xs text-destructive/80 mt-1">{error}</p>
            </div>
          )}

          {/* Step 2: Manual Deployment & Registration */}
          {step === 'generated' && (
            <div className="p-4 border rounded-lg bg-muted/40 space-y-4">
              <div>
                <h3 className="font-semibold mb-2">Step 2: Deploy Manually</h3>
                <p className="text-xs text-muted-foreground">
                  Use a tool like Remix, Hardhat, or Foundry to deploy the generated contracts. Start with the Token, then the Governor, and so on.
                </p>
              </div>
              <div className="space-y-2">
                <Label htmlFor="dao-address">Step 3: Enter Governor Contract Address</Label>
                <Input 
                  id="dao-address"
                  placeholder="0x..."
                  value={daoAddress}
                  onChange={(e) => setDaoAddress(e.target.value)}
                />
              </div>
              <Button onClick={handleUploadAndRegister} disabled={!daoAddress.trim() || !isConnected}>
                <PenSquare className="mr-2 h-4 w-4" />
                Upload & Register On-Chain
              </Button>
            </div>
          )}

          {(step === 'uploading' || step === 'registering' || step === 'registered') && (
            <div className="p-4 border rounded-lg bg-green-500/10 text-green-700 flex flex-col gap-3">
              <div className="flex items-center gap-3">
                <CheckCircle className="h-5 w-5" />
                <div>
                  <h3 className="font-semibold">Registration in Progress!</h3>
                  <p className="text-xs break-all">DAO Address: {daoAddress}</p>
                </div>
              </div>
              {isRegistering && <p className="text-xs flex items-center"><Loader className="mr-2 h-4 w-4 animate-spin" />Waiting for wallet confirmation...</p>}
              {hash && (
                <p className="text-xs text-muted-foreground">
                  Transaction sent! <a href={`https://sepolia.etherscan.io/tx/${hash}`} target="_blank" rel="noopener noreferrer" className="underline">View on Etherscan</a>
                </p>
              )}
            </div>
          )}
        </div>
      </SheetContent>
    </>
  );
};