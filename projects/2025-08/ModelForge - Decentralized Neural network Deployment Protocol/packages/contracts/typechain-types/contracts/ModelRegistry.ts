/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ModelRegistry {
  export type ModelStruct = {
    name: string;
    description: string;
    ipfsHash: string;
    modelType: string;
    owner: AddressLike;
    timestamp: BigNumberish;
    isActive: boolean;
    version: string;
    downloads: BigNumberish;
  };

  export type ModelStructOutput = [
    name: string,
    description: string,
    ipfsHash: string,
    modelType: string,
    owner: string,
    timestamp: bigint,
    isActive: boolean,
    version: string,
    downloads: bigint
  ] & {
    name: string;
    description: string;
    ipfsHash: string;
    modelType: string;
    owner: string;
    timestamp: bigint;
    isActive: boolean;
    version: string;
    downloads: bigint;
  };
}

export interface ModelRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allModelIds"
      | "deactivateModel"
      | "getModel"
      | "getModelsPaginated"
      | "getTotalModels"
      | "getUserModels"
      | "ipfsHashExists"
      | "models"
      | "owner"
      | "pause"
      | "paused"
      | "recordDownload"
      | "registerModel"
      | "renounceOwnership"
      | "transferOwnership"
      | "unpause"
      | "updateModel"
      | "userModels"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ModelDeactivated"
      | "ModelDownloaded"
      | "ModelRegistered"
      | "ModelUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allModelIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateModel",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getModel", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getModelsPaginated",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalModels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserModels",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ipfsHashExists",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "models", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordDownload",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerModel",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateModel",
    values: [BytesLike, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userModels",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allModelIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getModel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getModelsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalModels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserModels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ipfsHashExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "models", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordDownload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userModels", data: BytesLike): Result;
}

export namespace ModelDeactivatedEvent {
  export type InputTuple = [modelId: BytesLike];
  export type OutputTuple = [modelId: string];
  export interface OutputObject {
    modelId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModelDownloadedEvent {
  export type InputTuple = [modelId: BytesLike];
  export type OutputTuple = [modelId: string];
  export interface OutputObject {
    modelId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModelRegisteredEvent {
  export type InputTuple = [
    modelId: BytesLike,
    owner: AddressLike,
    name: string,
    ipfsHash: string,
    version: string
  ];
  export type OutputTuple = [
    modelId: string,
    owner: string,
    name: string,
    ipfsHash: string,
    version: string
  ];
  export interface OutputObject {
    modelId: string;
    owner: string;
    name: string;
    ipfsHash: string;
    version: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModelUpdatedEvent {
  export type InputTuple = [
    modelId: BytesLike,
    name: string,
    description: string,
    version: string
  ];
  export type OutputTuple = [
    modelId: string,
    name: string,
    description: string,
    version: string
  ];
  export interface OutputObject {
    modelId: string;
    name: string;
    description: string;
    version: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ModelRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ModelRegistry;
  waitForDeployment(): Promise<this>;

  interface: ModelRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allModelIds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  deactivateModel: TypedContractMethod<
    [_modelId: BytesLike],
    [void],
    "nonpayable"
  >;

  getModel: TypedContractMethod<
    [_modelId: BytesLike],
    [ModelRegistry.ModelStructOutput],
    "view"
  >;

  getModelsPaginated: TypedContractMethod<
    [_offset: BigNumberish, _limit: BigNumberish],
    [string[]],
    "view"
  >;

  getTotalModels: TypedContractMethod<[], [bigint], "view">;

  getUserModels: TypedContractMethod<[_user: AddressLike], [string[]], "view">;

  ipfsHashExists: TypedContractMethod<[arg0: string], [boolean], "view">;

  models: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean,
        string,
        bigint
      ] & {
        name: string;
        description: string;
        ipfsHash: string;
        modelType: string;
        owner: string;
        timestamp: bigint;
        isActive: boolean;
        version: string;
        downloads: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  recordDownload: TypedContractMethod<
    [_modelId: BytesLike],
    [void],
    "nonpayable"
  >;

  registerModel: TypedContractMethod<
    [
      _name: string,
      _description: string,
      _ipfsHash: string,
      _modelType: string,
      _version: string
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateModel: TypedContractMethod<
    [
      _modelId: BytesLike,
      _name: string,
      _description: string,
      _version: string
    ],
    [void],
    "nonpayable"
  >;

  userModels: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allModelIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "deactivateModel"
  ): TypedContractMethod<[_modelId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getModel"
  ): TypedContractMethod<
    [_modelId: BytesLike],
    [ModelRegistry.ModelStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getModelsPaginated"
  ): TypedContractMethod<
    [_offset: BigNumberish, _limit: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalModels"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserModels"
  ): TypedContractMethod<[_user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "ipfsHashExists"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "models"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean,
        string,
        bigint
      ] & {
        name: string;
        description: string;
        ipfsHash: string;
        modelType: string;
        owner: string;
        timestamp: bigint;
        isActive: boolean;
        version: string;
        downloads: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "recordDownload"
  ): TypedContractMethod<[_modelId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerModel"
  ): TypedContractMethod<
    [
      _name: string,
      _description: string,
      _ipfsHash: string,
      _modelType: string,
      _version: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateModel"
  ): TypedContractMethod<
    [
      _modelId: BytesLike,
      _name: string,
      _description: string,
      _version: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userModels"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "ModelDeactivated"
  ): TypedContractEvent<
    ModelDeactivatedEvent.InputTuple,
    ModelDeactivatedEvent.OutputTuple,
    ModelDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "ModelDownloaded"
  ): TypedContractEvent<
    ModelDownloadedEvent.InputTuple,
    ModelDownloadedEvent.OutputTuple,
    ModelDownloadedEvent.OutputObject
  >;
  getEvent(
    key: "ModelRegistered"
  ): TypedContractEvent<
    ModelRegisteredEvent.InputTuple,
    ModelRegisteredEvent.OutputTuple,
    ModelRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ModelUpdated"
  ): TypedContractEvent<
    ModelUpdatedEvent.InputTuple,
    ModelUpdatedEvent.OutputTuple,
    ModelUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ModelDeactivated(bytes32)": TypedContractEvent<
      ModelDeactivatedEvent.InputTuple,
      ModelDeactivatedEvent.OutputTuple,
      ModelDeactivatedEvent.OutputObject
    >;
    ModelDeactivated: TypedContractEvent<
      ModelDeactivatedEvent.InputTuple,
      ModelDeactivatedEvent.OutputTuple,
      ModelDeactivatedEvent.OutputObject
    >;

    "ModelDownloaded(bytes32)": TypedContractEvent<
      ModelDownloadedEvent.InputTuple,
      ModelDownloadedEvent.OutputTuple,
      ModelDownloadedEvent.OutputObject
    >;
    ModelDownloaded: TypedContractEvent<
      ModelDownloadedEvent.InputTuple,
      ModelDownloadedEvent.OutputTuple,
      ModelDownloadedEvent.OutputObject
    >;

    "ModelRegistered(bytes32,address,string,string,string)": TypedContractEvent<
      ModelRegisteredEvent.InputTuple,
      ModelRegisteredEvent.OutputTuple,
      ModelRegisteredEvent.OutputObject
    >;
    ModelRegistered: TypedContractEvent<
      ModelRegisteredEvent.InputTuple,
      ModelRegisteredEvent.OutputTuple,
      ModelRegisteredEvent.OutputObject
    >;

    "ModelUpdated(bytes32,string,string,string)": TypedContractEvent<
      ModelUpdatedEvent.InputTuple,
      ModelUpdatedEvent.OutputTuple,
      ModelUpdatedEvent.OutputObject
    >;
    ModelUpdated: TypedContractEvent<
      ModelUpdatedEvent.InputTuple,
      ModelUpdatedEvent.OutputTuple,
      ModelUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
